---
- name: Install Casks & Formulae from Homebrew 
  hosts: macs
  gather_facts: yes
  tasks:
    - name: Check user
      command: echo $USER
      register: current_user
      ignore_errors: true

    - name: Show user
      debug:
        var: current_user.stdout_lines

    - name: Get current shell for the user
      shell: echo $SHELL
      register: current_shell

    - name: Show shell
      debug:
        var: current_shell.stdout_lines

    - name: Check Homebrew version
      command: /opt/homebrew/bin/brew --version
      register: brew_version
      ignore_errors: true

    - name: Show Homebrew version
      debug:
        var: brew_version.stdout_lines

    - name: Install Homebrew Casks
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: present
      with_items:
        - 1password
        - cheatsheet
        - firefox@developer-edition
        - iterm2
        - parallels
        - android-platform-tools
        - gather
        - keepassxc
        - tiles
        - visual-studio-code
        - docker
        - imazing-converter
        - obs
        - typora
        - datasette
        - keymapp
        - lm-studio
        - anki
        - microsoft-remote-desktop
        - mracos/tap/calendr
        - spotify
        - cleanshot
        - franz

    - name: Install Homebrew Formulae
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      with_items:
        - ansible
        - ffmpeg
        - fish
        - midnight-commander
        - bpytop
        - neofetch
        - mas
        - nmap
        - lf
        - sqlite-utils

- name: Set default shell for a user
  hosts: macs
  vars_files:
    - secret.yml
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks:
    - name: Change the default shell to fish
      ansible.builtin.user:
        name: janwennmann
        shell: /opt/homebrew/bin/fish

- name: Setup Homebrew path in fish shell for macOS
  hosts: macs
  gather_facts: yes

  tasks:
    - name: Check for Homebrew in /usr/local/bin
      stat:
        path: /usr/local/bin/brew
      register: brew_local

    - name: Check for Homebrew in /opt/homebrew/bin
      stat:
        path: /opt/homebrew/bin/brew
      register: brew_opt

    - name: Ensure Homebrew path for fish shell on Intel Macs
      lineinfile:
        path: "{{ ansible_env.HOME }}/.config/fish/config.fish"
        line: "set -gx PATH /usr/local/bin $PATH"
        create: yes
        state: present
        regexp: '^set -gx PATH /usr/local/bin \$PATH'
        backup: yes
      when: brew_local.stat.exists and (ansible_facts['architecture'] == 'x86_64')

    - name: Ensure Homebrew path for fish shell on Apple Silicon
      lineinfile:
        path: "{{ ansible_env.HOME }}/.config/fish/config.fish"
        line: "set -gx PATH /opt/homebrew/bin $PATH"
        create: yes
        state: present
        regexp: '^set -gx PATH /opt/homebrew/bin \$PATH'
        backup: yes
      when: brew_opt.stat.exists and (ansible_facts['architecture'] == 'arm64' or ansible_facts['architecture'] == 'aarch64')

- name: Install STARFACE beta on macOS
  hosts: macs
  vars_files:
    - secret.yml
  become: yes
  become_method: sudo
  vars:
    starface_dmg_url: "https://www.starface-cdn.de/starface/clients/mac/STARFACE_8.1.0_887_889da59.dmg"
    starface_mount_path: "/Volumes/STARFACE Installer"
    starface_app_path: "/Applications/STARFACE.app"

  tasks:
    - name: Check if STARFACE is already installed
      stat:
        path: "{{ starface_app_path }}"
      register: starface_installed

    - name: Download STARFACE DMG if not installed
      get_url:
        url: "{{ starface_dmg_url }}"
        dest: "/tmp/STARFACE.dmg"
        mode: '0644'
      when: not starface_installed.stat.exists

    - name: Mount STARFACE DMG if not installed
      command: hdiutil attach /tmp/STARFACE.dmg
      register: mount_output
      when: not starface_installed.stat.exists

    - name: Install STARFACE if not installed
      command: cp -R "{{ starface_mount_path }}/STARFACE.app" "{{ starface_app_path }}"
      when: not starface_installed.stat.exists

    - name: Unmount STARFACE DMG
      command: hdiutil detach "{{ starface_mount_path }}"
      when: not starface_installed.stat.exists

    - name: Clean up DMG file
      file:
        path: "/tmp/STARFACE.dmg"
        state: absent
      when: not starface_installed.stat.exists

- hosts: macs
  roles:
    - logitech_options+